#!/bin/sh
# -*- sh -*-
# vim: ft=sh

: << =cut

=head1 NAME

clightning_channels - Plugin to monitor your channels on the lightning network

=head1 CONFIGURATION

 [clightning_*]
    user bitcoin
    env.binary lightning-cli
    env.data_dir /var/db/c-lightning

=head1 AUTHOR

Luc Dvchosal

=head1 LICENSE

AGPLv3+

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf

=cut

BINARY=${binary:-"/usr/bin/lightning-cli"}
DATA_DIR=${data_dir:-"/var/db/c-lightning"}

if [ "$1" == "test" ] \
   || [ "$1" == "test2" ]; then
    echo 
    echo "# "
    echo "# $0 $1"
    echo "# "
    echo 
fi


if [ ! -f "$BINARY" ]; then
    echo $0 $BINARY not found
    BINARY=/bin/echo
fi

if [ "$1" = "autoconf" ]; then
    autoconf="yes"

    command -v $BINARY >/dev/null || autoconf="no"

    echo $autoconf
    exit 0
fi

if [ "$1" = "debug" ]; then
    echo $listfunds | jq
fi

listfunds=$($BINARY --lightning-dir=$DATA_DIR listfunds)

if [ "$1" = "test" ]; then

   listfunds=$(cat <<__EOF__
{                                                                                                                                                                                        
   "outputs": [                                                                                                                                                                          
      {                                                                                                                                                                                  
         "txid": "***txid1***",                                                                                                     
         "output": 0,                                                                                                                                                                    
         "value": 123456,
         "amount_msat": "123456000msat",
         "scriptpubkey": "***scriptpubkey***",
         "address": "***address**",
         "status": "confirmed",
         "blockheight": 695394,
         "reserved": false
      },                                                                                                                                                                          
      {                                                                                                                                                                                  
         "txid": "***txid2***",                                                                                                     
         "output": 0,                                                                                                                                                                    
         "value": 123456,
         "amount_msat": "123456000msat",
         "scriptpubkey": "***scriptpubkey***",
         "address": "***address**",
         "status": "confirmed",
         "blockheight": 695394,
         "reserved": false
      }
   ],
   "channels": [
      {
         "peer_id": "***peer_id1***",
         "connected": true,
         "state": "CHANNELD_NORMAL",
         "short_channel_id": "***short_channel_id***",
         "channel_sat": 222222,
         "our_amount_msat": "222222000msat",
         "channel_total_sat": 222222,
         "amount_msat": "222222000msat",
         "funding_txid": "***funding_txid***",
         "funding_output": 1
      },
      {
         "peer_id": "***peer_id2***",
         "connected": true,
         "state": "CHANNELD_NORMAL",
         "short_channel_id": "***short_channel_id***",
         "channel_sat": 111111,
         "our_amount_msat": "1111111000msat",
         "channel_total_sat": 1111111,
         "amount_msat": "111111000msat",
         "funding_txid": "***funding_txid***",
         "funding_output": 1
      }
   ]
}
__EOF__
)

fi

if [ "$1" = "test2" ]; then

   listfunds=$(cat <<__EOF__
{
   "outputs": [ ],
   "channels": [ ]
}
__EOF__
)

fi

jsont=$(cat <<__EOF__
{
   "channels" : {
      "total": .channels | length,
      "short_channel_id": .channels[].short_channel_id
   },

   "balance" : [
      .channels[] |
      {
         "short_channel_id" : .short_channel_id,
         "our" : .channel_sat,
         "their" : .channel_total_sat - .channel_sat
      }
   ]
}
__EOF__
)

result=$(echo $listfunds | jq "$(echo $jsont)")

if [ "$2" = "debug" ]; then
    echo $listfunds | jq
    echo $result | jq
fi

if [ "$1" = "config" ]; then
   cat <<__EOF__
multigraph channels

graph_title Channel count
graph_vlabel number of channels
graph_category clightning
graph_info This graph shows the number of open channels.
total.label total

__EOF__

   for short_channel_id in $(echo $result | jq -r '.channels.short_channel_id'); do
      echo "channel_$(echo $short_channel_id | sha1sum | cut -c1-8).label $short_channel_id"
   done


   for channel in $(echo $result | jq -r '.balance'); do
      short_channel_id=$(echo $channel | jq -r '.short_channel_id')
      label=$(echo $short_channel_id | sha1sum | cut -c1-8)

      cat <<__EOF__
multigraph channels_balance_$label

graph_title Channel balance
graph_vlabel sats
graph_category clightning
graph_info This graph shows the balance of an open channel.

our.label our
their.label their
__EOF__

   done

   exit 0
fi
   cat <<__EOF__
multigraph channels

total.value $(echo $result | jq -r '.channels.total')
__EOF__

for short_channel_id in $(echo $result | jq -r '.channels.short_channel_id'); do
   echo "channel_$(echo $short_channel_id | sha1sum | cut -c1-8).value 1"
done


for channel in $(echo $result | jq -r '.balance'); do
   short_channel_id=$(echo $channel | jq -r '.short_channel_id')
   our=$(echo $channel | jq -r '.our')
   their=$(echo $channel | jq -r '.their')
   label=$(echo $short_channel_id | sha1sum | cut -c1-8)

   cat <<__EOF__
multigraph channels_balance_$label

our.value $our
their.value $their
__EOF__

done
