#!/bin/sh
# -*- sh -*-
# vim: ft=sh

: << =cut

=head1 NAME

clightning_invoices - Plugin to monitor your invoices on the lightning network

=head1 CONFIGURATION

 [clightning_*]
    user bitcoin
    env.binary lightning-cli
    env.data_dir /var/db/c-lightning

=head1 AUTHOR

Luc Dvchosal

=head1 LICENSE

AGPLv3+

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf

=cut

BINARY=${binary:-"/usr/bin/lightning-cli"}
DATA_DIR=${data_dir:-"/var/db/c-lightning"}

if [ "$1" == "test" ] \
   || [ "$1" == "test2" ]; then
    echo 
    echo "# "
    echo "# $0 $1"
    echo "# "
    echo 
fi



if [ ! -f "$BINARY" ]; then
    echo $0 $BINARY not found
    BINARY=/bin/echo
fi


if [ "$1" = "autoconf" ]; then
    autoconf="yes"

    command -v $BINARY >/dev/null || autoconf="no"

    echo $autoconf
    exit 0
fi

listinvoices=$($BINARY --lightning-dir=$DATA_DIR listinvoices)

if [ "$1" = "test" ]; then

   listinvoices=$(cat <<__EOF__
{
    "invoices": [
       {
          "label": "label",
          "bolt11": "bolt11",
          "payment_hash": "payment_hash",
          "msatoshi": 1000000,
          "amount_msat": 1000000,
          "status": "paid",
          "pay_index": 1,
          "msatoshi_received": 1000000,
          "amount_received_msat": 1000000,
          "paid_at": 1628239212,
          "payment_preimage": "payment_preimage",
          "description": "invoice",
          "expires_at": 1628843931
       },
      {
         "label": "label",
         "bolt11": "bolt11",
         "payment_hash": "payment_hash",
         "msatoshi": 1000,
         "amount_msat": 1000,
         "status": "expired",
         "description": "un",
         "expires_at": 1632083433
      }
   ]
}
__EOF__
)

fi

if [ "$1" = "test2" ]; then

   listinvoices=$(cat <<__EOF__
{
   "invoices": []
}
__EOF__
)

fi


#
# transform
#

jsont=$(cat <<__EOF__
{
   "invoices" : {
      "total": [ 
         .invoices[] 
      ] 
      | length,

      "expired": [ 
         .invoices[] 
            | select(.status == "expired") 
      ] 
      | length,

      "paid": [ 
         .invoices[] 
            | select(.status == "paid") 
      ] 
      | length
   },

   "amount" : {
      "total": [
         [ 
            .invoices[] 
               | .msatoshi 
         ], 
         [0]
      ] 
      | add 
      | add,

      "expired": [
         [ 
            .invoices[] 
               | select(.status == "expired") 
               | .msatoshi 
         ], 
         [0]
      ] 
      | add 
      | add,

      "paid": [
         [ 
            .invoices[] 
               | select(.status == "paid") 
               | .msatoshi 
         ], 
         [0]
      ] 
      | add 
      | add,

   }
}
__EOF__
)

result=$(echo $listinvoices | jq "$(echo $jsont)")

if [ "$2" = "debug" ]; then
    echo $listinvoices | jq
    echo $result | jq
fi


#
# config
#

if [ "$1" = "config" ]; then
cat <<__EOF__
multigraph invoices

graph_title Invoices
graph_vlabel invoices
graph_category clightning
graph_info This graph shows the invoices on your clightning node.

total.label total
total.draw LINE3
expired.label expired
expired.draw AREA
paid.label paid
paid.draw AREASTACK

multigraph invoices_amount

graph_title Invoices amount
graph_vlabel sats
graph_category clightning
graph_info This graph shows the total invoices on your clightning node.

total.label total
total.draw LINE3
expired.label expired
expired.draw AREA
paid.label paid
paid.draw AREASTACK

__EOF__

    exit 0
fi
cat <<__EOF__
multigraph invoices

total.value $(echo $result | jq -r '.invoices.total')
expired.value $(echo $result | jq -r '.invoices.expired')
paid.value $(echo $result | jq -r '.invoices.paid')

multigraph invoices_amount

total.value $(echo $result | jq -r '.amount.total')
expired.value $(echo $result | jq -r '.amount.expired')
paid.value $(echo $result | jq -r '.amount.paid')

__EOF__
