#!/bin/sh
# -*- sh -*-
# vim: ft=sh

: << =cut

=head1 NAME

clightning_funds - Plugin to monitor your funds (channels and funds) on the lightning network

=head1 CONFIGURATION

 [clightning_*]
    user bitcoin
    env.binary lightning-cli
    env.data_dir /var/db/c-lightning

=head1 AUTHOR

Luc Dvchosal

=head1 LICENSE

AGPLv3+

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf

=cut

BINARY=${binary:-"/usr/bin/lightning-cli"}
DATA_DIR=${data_dir:-"/var/db/c-lightning"}

if [ "$1" == "test" ] \
   || [ "$1" == "test2" ]; then
    echo 
    echo "# "
    echo "# $0 $1"
    echo "# "
    echo 
fi



if [ ! -f "$BINARY" ]; then
    echo $0 $BINARY not found
    BINARY=/bin/echo
fi


if [ "$1" = "autoconf" ]; then
    autoconf="yes"

    command -v $BINARY >/dev/null || autoconf="no"

    echo $autoconf
    exit 0
fi

listfunds=$($BINARY --lightning-dir=$DATA_DIR listfunds)

if [ "$1" = "test" ]; then

   listfunds=$(cat <<__EOF__
{                                                                                                                                                                                        
   "outputs": [                                                                                                                                                                          
      {                                                                                                                                                                                  
         "txid": "***txid1***",                                                                                                     
         "output": 0,                                                                                                                                                                    
         "value": 123456,
         "amount_msat": "123456000msat",
         "scriptpubkey": "***scriptpubkey***",
         "address": "***address**",
         "status": "confirmed",
         "blockheight": 695394,
         "reserved": false
      },                                                                                                                                                                          
      {                                                                                                                                                                                  
         "txid": "***txid2***",                                                                                                     
         "output": 0,                                                                                                                                                                    
         "value": 123456,
         "amount_msat": "123456000msat",
         "scriptpubkey": "***scriptpubkey***",
         "address": "***address**",
         "status": "confirmed",
         "blockheight": 695394,
         "reserved": false
      }
   ],
   "channels": [
      {
         "peer_id": "***peer_id1***",
         "connected": true,
         "state": "CHANNELD_NORMAL",
         "short_channel_id": "***short_channel_id***",
         "channel_sat": 222222,
         "our_amount_msat": "222222000msat",
         "channel_total_sat": 222222,
         "amount_msat": "222222000msat",
         "funding_txid": "***funding_txid***",
         "funding_output": 1
      },
      {
         "peer_id": "***peer_id2***",
         "connected": true,
         "state": "CHANNELD_NORMAL",
         "short_channel_id": "***short_channel_id***",
         "channel_sat": 111111,
         "our_amount_msat": "1111111000msat",
         "channel_total_sat": 1111111,
         "amount_msat": "111111000msat",
         "funding_txid": "***funding_txid***",
         "funding_output": 1
      }
   ]
}
__EOF__
)

fi

if [ "$1" = "test2" ]; then

   listfunds=$(cat <<__EOF__
{
   "outputs": [ ],
   "channels": [ ]
}
__EOF__
)

fi



#
# transform
#

jsont=$(cat <<__EOF__
{
   "txids": [
      .outputs[].txid
   ],

   "peer_ids": [
      .channels[].peer_id
   ],

   "total_funds": 
      [ 
         [ 
            "0", 
            .channels[].amount_msat, 
            .outputs[].amount_msat
               | sub("msat";"")  
               | tonumber 
         ] 
         | add 
         / 1000 
      ][0],

   "total_channels":
      [ 
         [ 
            "0", 
            .channels[].amount_msat  
               | sub("msat";"")  
               | tonumber 
         ] 
         | add 
         / 1000 
      ][0],

   "total_outpouts":
      [ 
         [ 
            "0", 
            .outputs[].amount_msat  
               | sub("msat";"")  
               | tonumber 
         ] 
         | add 
         / 1000 
      ][0],

   "channels": [ 
      .channels[] | {
         "id": .peer_id,
         "label": .short_channel_id,
         "value": [ 
            .amount_msat 
               | sub("msat";"") 
               | tonumber 
               / 1000 
            ][0]
      }],

   "outputs": [ .outputs[] | {
         "id": .txid,
         "label": .address,
         "value": [ 
            .amount_msat 
               | sub("msat";"") 
               | tonumber 
               / 1000
         ][0]
      }]
}
__EOF__
)

result=$(echo $listfunds | jq "$(echo $jsont)")

if [ "$2" = "debug" ]; then
    echo $listfunds | jq
    echo $result | jq
fi


#
# config
#

if [ "$1" = "config" ]; then
   cat <<__EOF__
multigraph funds

graph_title Channel and funds
graph_vlabel sats
graph_category clightning
graph_info This graph shows the sats available on open channels and remaining funds.

total.label total
outputs.label outputs
outputs.draw AREASTACK
channels.label channels
channels.draw AREASTACK
__EOF__


   cat <<__EOF__

multigraph funds_outputs

graph_title Channel and funds / Outputs
graph_vlabel sats
graph_category clightning
graph_info This graph shows the sats available on available outputs


__EOF__

    for item in $(echo $result | jq -c '.outputs[]'); do
        id=$(echo $item | jq -r ".id")
        label=$(echo $item | jq -r ".label")
        value=$(echo $item | jq -r ".value * -1")
        sid=$(echo $id | sha1sum | cut -c1-8)
        
        echo "output_$sid.label ${label}"
        echo "output_$sid.draw AREASTACK"
    done


   cat <<__EOF__

multigraph funds_channels

graph_title Channel and funds / Channels
graph_vlabel sats
graph_category clightning
graph_info This graph shows the sats available on open channels


__EOF__
    for item in $(echo $result | jq -c '.channels[]'); do
        id=$(echo $item | jq -r ".id")
        label=$(echo $item | jq -r ".label")
        value=$(echo $item | jq -r ".value")
        sid=$(echo $id | sha1sum | cut -c1-8)

        echo "chan_$sid.label ${label}"
        echo "chan_$sid.draw AREASTACK"
    done

    exit 0
fi

cat <<__EOF__

multigraph funds

total.value $(echo $result | jq -r '.total_funds')"
outputs.value $(echo $result | jq -r '.total_outpouts')"
channels.value $(echo $result | jq -r '.total_channels')"

__EOF__


cat <<__EOF__

multigraph funds_outputs

__EOF__

for item in $(echo $result | jq -c '.outputs[]'); do
   id=$(echo $item | jq -r ".id")
   label=$(echo $item | jq -r ".label")
   value=$(echo $item | jq -r ".value")
   sid=$(echo $id | sha1sum | cut -c1-8)

   echo "output_$sid.value $value"
done


cat <<__EOF__

multigraph funds_channels

__EOF__

for item in $(echo $result | jq -c '.channels[]'); do
   id=$(echo $item | jq -r ".id")
   label=$(echo $item | jq -r ".label")
   value=$(echo $item | jq -r ".value")
   sid=$(echo $id | sha1sum | cut -c1-8)

   echo "chan_$sid.value $value"
done
