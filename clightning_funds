#!/bin/sh
# -*- sh -*-
# vim: ft=sh

: << =cut

=head1 NAME

clightning_funds - Plugin to monitor your funds (channels and funds) on the lightning network

=head1 CONFIGURATION

 [clightning_*]
    user bitcoin
    env.binary lightning-cli
    env.data_dir /var/db/c-lightning

=head1 AUTHOR

Luc Dvchosal

=head1 LICENSE

AGPLv3+

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf

=cut

BINARY=${binary:-"/usr/bin/lightning-cli"}
DATA_DIR=${data_dir:-"/var/db/c-lightning"}

if [ "$1" = "autoconf" ]; then
    autoconf="yes"

    command -v $BINARY >/dev/null || autoconf="no"

    echo $autoconf
    exit 0
fi

listfunds=$($BINARY --lightning-dir=$DATA_DIR listfunds)

# lightning-cli --lightning-dir=/var/db/c-lightning listfunds
# {
#    "outputs": [
#       {        
#          "txid": "***txid***",
#          "output": 0,
#          "value": 123456,
#          "amount_msat": "123456000msat",
#          "scriptpubkey": "***scriptpubkey***",
#          "address": ""***address**",
#          "status": "confirmed",
#          "blockheight": 695394,
#          "reserved": false
#       },
#       ...
#    ],
#    "channels": [
#       {
#          "peer_id": "***peer_id***",
#          "connected": true,
#          "state": "CHANNELD_NORMAL",
#          "short_channel_id": ""***short_channel_id***",
#          "channel_sat": 123123,
#          "our_amount_msat": "123123000msat",
#          "channel_total_sat": 123123,
#          "amount_msat": "123123000msat",
#          "funding_txid": "***funding_txid***",
#          "funding_output": 1
#       },
#       ...
#    ]
# }


if [ "$1" = "config" ]; then
    echo 'graph_title Channel count'
    echo 'graph_vlabel number of channels'
    echo 'graph_category clightning'
    echo 'graph_info This graph shows the number of open channels.'
    echo 'total.label total (sat)'
    echo 'outputs.label outputs (sat)'
    echo 'channels.label channels (sat)'

    for txid in $(echo $listfunds | jq '.outputs[].txid'); do
        echo "output_$(echo $txid | sha1sum | cut -c1-8).label ${txid}"
    done

    for peerid in $(echo $listfunds | jq '.channels[].peer_id'); do
        echo "peer_$(echo $peerid | sha1sum | cut -c1-8).label ${peerid}"
    done

    exit 0
fi

echo "total.value $(echo $listfunds | jq '[ [ { "amount_msat" : "0msat" } ], .[] | .[].amount_msat  | sub("msat";"")  | tonumber // 0] | add / 1000')"
echo "outputs.value $(echo $listfunds | jq '[ [ { "amount_msat" : "0msat" } ], .outputs | .[].amount_msat  | sub("msat";"")  | tonumber ] | add / 1000 * -1')"
echo "channels.value $(echo $listfunds | jq '[ [ { "amount_msat" : "0msat" } ], .channels | .[].amount_msat  | sub("msat";"")  | tonumber ] | add / 1000')"

for txid in $(echo $listfunds | jq '.outputs[].txid'); do
    printf "output_$(echo $txid | sha1sum | cut -c1-8).value "
    echo $listfunds | jq ".outputs[] | select( .txid == "${txid}") | .value * -1"
done

for peerid in $(echo $listfunds | jq '.channels[].peer_id'); do
    printf "peer_$(echo $peerid | sha1sum | cut -c1-8).value "
    echo $listfunds | jq ".channels[] | select( .peer_id == "${peerid}") | .channel_sat"
done