#!/bin/sh
# -*- sh -*-
# vim: ft=sh

: << =cut

=head1 NAME

clightning_pays - Plugin to monitor your pays on the lightning network

=head1 CONFIGURATION

 [clightning_*]
    user bitcoin
    env.binary lightning-cli
    env.data_dir /var/db/c-lightning

=head1 AUTHOR

Luc Dvchosal

=head1 LICENSE

AGPLv3+

=head1 MAGIC MARKERS

 #%# family=auto
 #%# capabilities=autoconf

=cut

BINARY=${binary:-"/usr/bin/lightning-cli"}
DATA_DIR=${data_dir:-"/var/db/c-lightning"}

if [ "$1" == "test" ] \
   || [ "$1" == "test2" ]; then
    echo 
    echo "# "
    echo "# $0 $1"
    echo "# "
    echo 
fi


if [ ! -f "$BINARY" ]; then
    echo $0 $BINARY not found
    BINARY=/bin/echo
fi


if [ "$1" = "autoconf" ]; then
    autoconf="yes"

    command -v $BINARY >/dev/null || autoconf="no"

    echo $autoconf
    exit 0
fi

listpays=$($BINARY --lightning-dir=$DATA_DIR listpays)

if [ "$1" = "test" ]; then

   listpays=$(cat <<__EOF__
{
   "pays": [
      {
         "bolt11": "bolt11",
         "destination": "destination",
         "payment_hash": "payment_hash",
         "status": "complete",
         "created_at": 1628762052,
         "preimage": "preimage",
         "amount_msat": 1000000,
         "amount_sent_msat": 1000000
      },
      {
         "bolt11": "bolt11",
         "destination": "destination",
         "payment_hash": "payment_hash",
         "status": "failed",
         "created_at": 1628762052,
         "preimage": "preimage",
         "amount_msat": 1000000,
         "amount_sent_msat": 1000000
      },
      {
         "bolt11": "bolt11",
         "destination": "destination",
         "payment_hash": "payment_hash",
         "status": "pending",
         "created_at": 1628762052,
         "preimage": "preimage",
         "amount_msat": 1000000,
         "amount_sent_msat": 1000000
      }
   ]
}
__EOF__
)

fi

if [ "$1" = "test2" ]; then

   listpays=$(cat <<__EOF__
{
   "pays": []
}
__EOF__
)

fi


#
# transform
#

jsont=$(cat <<__EOF__
{
   "pays" : {

      "total": [ 
         .pays[] 
      ] | length,

      "complete": [ 
         .pays[] 
         | select(.status == "complete") 
      ] 
      | length,

      "failed": [ 
         .pays[] 
         | select(.status == "failed") 
      ] 
      | length,

      "pending": [ 
         .pays[] 
         | select(.status == "pending") 
      ] 
      | length

   },

   "amount" : {

      "total": [
         [ 
            .pays[] 
               | .amount_msat 
               / 1000
         ], [0]
      ] 
      | add 
      | add,

      
      "complete": [
         [ 
            .pays[] 
               | select(.status == "complete") 
               | .amount_msat 
               / 1000
         ], [0]
      ] 
      | add 
      | add,

         
      "failed": [
         [ 
            .pays[] 
               | select(.status == "failed") 
               | .amount_msat 
               / 1000
         ], [0]
      ] 
      | add 
      | add,


         
      "pending": [
         [ 
            .pays[] 
               | select(.status == "pending") 
               | .amount_msat 
               / 1000
         ], [0]
      ] 
      | add 
      | add,

   }
}
__EOF__
)

result=$(echo $listpays | jq "$(echo $jsont)")

if [ "$2" = "debug" ]; then
    echo $listpays | jq
    echo $result | jq
fi


#
# config
#

if [ "$1" = "config" ]; then

   cat <<__EOF__
multigraph pays

graph_title Pays
graph_vlabel pays
graph_category clightning
graph_info This graph shows the pays on your clightning node.

total.label total
complete.label complete
complete.draw AREASTACK
failed.label failed
failed.draw AREASTACK
pending.label pending
pending.draw AREASTACK

multigraph pays_amount

graph_title Pays amount
graph_vlabel sats
graph_category clightning
graph_info This graph shows the pays on your clightning node.

total.label total
complete.label complete
complete.draw AREASTACK
failed.label failed
failed.draw AREASTACK
pending.label pending
pending.draw AREASTACK
__EOF__

    exit 0
fi

cat <<__EOF__
multigraph pays

total.value $(echo $result | jq -r '.pays.total')
complete.value $(echo $result | jq -r '.pays.complete')
failed.value $(echo $result | jq -r '.pays.failed')
pending.value $(echo $result | jq -r '.pays.pending')

multigraph pays_amount

total.value $(echo $result | jq -r '.amount.total')
complete.value $(echo $result | jq -r '.amount.complete')
failed.value $(echo $result | jq -r '.amount.failed')
pending.value $(echo $result | jq -r '.amount.pending')

__EOF__
